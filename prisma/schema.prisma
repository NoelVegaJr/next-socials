datasource db {
  provider = "mysql"
  url      = env("MYSQL_URI")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String? @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  joinDate DateTime?
  website String?
  bio String?
  posts Post[]
  likedPosts PostLike[]
  postComments PostComment[]
  accounts      Account[]
  sessions      Session[]
  followers Follower[] @relation("user_follower")
  following Follower[] @relation("user_following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid())
  text          String?
  userId        String
  date          DateTime
  user          User @relation(fields: [userId], references: [id])
  likes PostLike[]
  comments PostComment[]
}

model PostLike {
  id            String    @id @default(cuid())
  postId String
  post          Post @relation(fields: [postId], references: [id])
  userId String
  user          User @relation(fields: [userId], references: [id])

}

model PostComment {
  id            String    @id @default(cuid())
  postId String
  userId String
  text String
  date DateTime
  post          Post @relation(fields: [postId], references: [id])
  user          User @relation(fields: [userId], references: [id])
}

model Follower {
  id              String    @id @default(cuid())
  followingUserId String
  followerUserId  String
  follower          User @relation("user_follower", fields: [followingUserId], references: [id])
  following          User @relation("user_following", fields: [followerUserId], references: [id])
}
